"""
PovRAY raytrace modules based on
http://code.activestate.com/recipes/205451/ (r1)
"""
__all__ =['POVFile',  'Vector',  'Sphere',  'Box',  'Triangle', 'Pigment', 
'Texture', 'Finish', 'Normal', 'Camera', 'LightSource',  'Torus', 'Union', 
'Intersection', 'Difference',  'SkySphere', 'Mesh',  'Plane']
HEADER = """
// Persistence Of Vision Ray Tracer Scene Description pov_fib
// pov_fib:    Generated by tracer.py
// tracer.py is based on http://code.activestate.com/recipes/205451/ (r1)
// For PovRAY Version: 3.7 (includes radiosity)
// Date: September 2011
// Auth: Martin Prout 
// +width 800 +height 600 for basic_scene example
#version 3.7;
global_settings{
    assumed_gamma 1.0
    radiosity{
        pretrace_start 0.04
        pretrace_end 0.01
        count 200
        recursion_limit 3
        nearest_count 10
        error_bound 0.5
    }
}
"""


class POVFile(object):
    
    """
    In the original recipe this was simply called file class, it seems sensible 
    to use a more descriptive name
    """
    def __init__(self, fnam = "out.pov", *items):
        """
        Initialize the POVFile object with hard coded HEADER, this
        could easily be read from file for greater flexiblity
        """
        self.file = open(fnam, "w")
        self.__indent = 0
        self.writeln(HEADER)
        self.write(*items)
    def include(self, name):
        """
        Formats and writes a PovRAY include file 'name'
        """
        self.writeln( '#include "%s"' % name )
        self.writeln()
    def indent(self):
        """
        Make output pretty PovRAY is agnostic
        """
        self.__indent += 1
    def dedent(self):
        """
        Needed to keep indent in check!!!
        """
        self.__indent -= 1
        assert self.__indent >= 0
    def block_begin(self):
        """
        Open a PovRAY 'block'
        """
        self.writeln( "{" )
        self.indent()
    def block_end(self):
        """
        Close the most recent PovRAY 'block'
        """
        self.dedent()
        self.writeln( "}" )
        if self.__indent == 0:
            # blank line if this is a top level end
            self.writeln( )
    def write(self, *items):
        """
        Treat includes differently from regular items
        """
        for item in items:
            if type(item) == str:
                self.include(item)
            else:
                item.write(self)
    def writeln(self, line = ""):
        """
        Writes a line in os dependent way , do not use linesep
        print "    "*self.__indent+line
        """
        self.file.write("    "*self.__indent + line +'\n')

class Vector(object):
    """
    Wraps scalars as PovRAY "vector" in angle brackets
    """
    def __init__(self, *args):
        if len(args) == 1:
            self.vect = args[0]
        else:
            self.vect = args
    def __str__(self):
        return "<%s>" % (", ".join([str(x) for x in self.vect]))
    def __repr__(self):
        return "Vector(%s)" % self.vect
    def __mul__(self, other):
        return Vector( [r * other for r in self.vect] )
    def __rmul__(self, other):
        return Vector( [r * other for r in self.vect] )
        

class Item(object):
    """
    Is the base of PovRAY scene elements
    """
    def __init__(self, name, args = [], opts = [], **kwargs):
        self.name = name
        args = list(args)
        for i in range(len(args)):
            if type(args[i]) == tuple or type(args[i]) == list:
                args[i] = Vector(args[i])
        self.args = args
        self.opts = opts
        self.kwargs = kwargs
        
    def append(self, item):
        """
        Store opts
        """
        self.opts.append( item )
        
    def write(self, outfile):
        """
        Write to file
        """
        outfile.writeln( self.name )
        outfile.block_begin()
        if self.args:
            outfile.writeln( ", ".join([str(arg) for arg in self.args]) )
        for opt in self.opts:
            if hasattr(opt, "write"):
                opt.write(outfile)
            else:
                outfile.writeln( str(opt) )
        for key, val in self.kwargs.items():
            if type(val) == tuple or type(val) == list:
                val = Vector(*val)
                outfile.writeln( "%s %s" % (key, val) )
            else:
                outfile.writeln( "%s %s" % (key, val) )
        outfile.block_end()
    def __setattr__(self, name, val):
        self.__dict__[name] = val
        if name not in ["kwargs", "args", "opts", "name"]:
            self.__dict__["kwargs"][name] = val
            
    def __setitem__(self, i, val):
        if i < len(self.args):
            self.args[i] = val
        else:
            i += len(self.args)
            if i < len(self.opts):
                self.opts[i] = val
                
    def __getitem__(self, i, val):
        if i < len(self.args):
            return self.args[i]
        else:
            i += len(self.args)
            if i < len(self.opts):
                return self.opts[i]

class Texture(Item):
    """
    Wrapper for texture
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "texture", (), opts, **kwargs)

class Pigment(Item):
    """
    Wrapper for pigment
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "pigment", (), opts, **kwargs)

class Finish(Item):
    """
    Wrapper for finish
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "finish", (), opts, **kwargs)

class Normal(Item):
    """
    Wrapper for normal
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "normal", (), opts, **kwargs)

class Camera(Item):
    """
    Wrapper for camera
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "camera", (), opts, **kwargs)

class LightSource(Item):
    """
    Wrapper for light source
    """
    def __init__(self, vect, *opts, **kwargs):
        Item.__init__(self, "light_source", (Vector(vect), ), opts, **kwargs)

class Background(Item):
    """
    Wrapper for background
    """    
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "background", (), opts, **kwargs)

class Box(Item):
    """
    PovRAY box primitive
    """
    def __init__(self, v1, v2, *opts, **kwargs):
        #self.v1 = Vector(v1)
        #self.v2 = Vector(v2)
        Item.__init__(self, "box", (v1, v2), opts, **kwargs)

class Cylinder(Item):
    """
    PovRAY cylinder primitive
    """
    def __init__(self, v1, v2, radius, *opts, **kwargs):
        " opts: open "
        Item.__init__(self, "cylinder", (v1, v2, radius), opts, **kwargs)

class Plane(Item):
    """
    Wrapper for plane
    """
    def __init__(self, vect, dist, *opts, **kwargs):
        Item.__init__(self, "plane", (vect, dist), opts, **kwargs)
        
class SkySphere(Item):
    """
    Wrapper for Sky Sphere 
    the easy option is to use a declared sky from skies.inc 
    eg "S_Cloud3"
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "sky_sphere", opts, **kwargs) 
        
class ColorMap(Item):    
    """
    Wrapper for color map
    """
    def __init__(self,  *opts, **kwargs):
        Item.__init__(self, "color_map", (opts), **kwargs)         
        
class Torus(Item):
    """
    PovRAY torus primitive
    """
    def __init__(self, r1, r2, *opts, **kwargs):
        Item.__init__(self, "torus", (r1, r2), opts, **kwargs)

class Cone(Item):
    """
    PovRAY cone primitive
    """
    def __init__(self, v1, r1, v2, r2, *opts, **kwargs):
        """ 
        opts: open 
        """
        Item.__init__(self, "cone", (v1, r1, v2, r2), opts, **kwargs)

class Sphere(Item):
    """
    PovRAY sphere primitive
    """
    def __init__(self,  vect,  radius, *opts, **kwargs):
        Item.__init__(self, "sphere", (vect, radius), opts, **kwargs)
        
class Triangle(Item):
    """
    PovRAY triangle primitive, 3 vertices cf smooth_triangle (with normals)
    """
    def __init__(self, v1, v2, v3, *opts, **kwargs):
        Item.__init__(self, "triangle", (v1, v2,  v3), opts, **kwargs)
    
class Mesh(Item):
    """
    Wrap a group of PovRAY 'objects' as a mesh cf mesh2
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "mesh", (), opts, **kwargs)    

class Union(Item):
    """
    Wrap a group of PovRAY 'objects' as a union
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "union", (), opts, **kwargs)

class Intersection(Item):
    """
    Wrap a group of PovRAY 'objects' as a intersection
    """    
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "intersection", (), opts, **kwargs)

class Difference(Item):
    """
    Wrap a group of PovRAY 'objects' as a difference
    """
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "difference", (), opts, **kwargs)

class Merge(Item):
    """
    Merge a group of PovRAY 'objects' as a single object
    """   
    def __init__(self, *opts, **kwargs):
        Item.__init__(self, "merge", (), opts, **kwargs)


def basic_scene():
    """
    Basic external scene
    Note the use of tuples to group scalar values for vector type
    """
    scene = POVFile("basic_scene.pov",  "colors.inc",  "skies.inc")
    cam = Camera(location = (0, 2, -3), look_at = (0, 1, 2))
    sky = SkySphere("S_Cloud3")
    ground = Plane((0.0, 1.0, 0.0), 0.0,
                    Texture(
                            Pigment(color = "NeonBlue"),  
                            Finish(reflection = 0.15)
                            )
                        )
    sphere = Sphere( (0, 1, 2), 1, 
                    Texture(
                            Pigment(
                                    color = "Yellow")
                                    )
                                )
    light = LightSource( (2, 4, -3), color = "White")
    scene.write(cam,  sky,  light,  ground,  sphere)
    

def spiral():
    """
    Fibonacci spiral 
    Note the use of tuples to group scalar values for vector type
    and also as a list for the sphere coordinates
    """
    from math import sqrt, pi,  cos,  sin
    gamma = (sqrt(5) - 1) / 2
    fib = POVFile()
    Camera(location=(0, 0, -128), look_at = (0, 0, 0)).write(fib)
    LightSource((100, 100, -100), color = (1, 1, 1)).write(fib)
    LightSource((150, 150, -100), color = (0, 0, 0.3)).write(fib)
    LightSource((-150, 150, -100), color = (0, 0.3, 0)).write(fib)
    LightSource((150, -150, -100), color = (0.3, 0, 0)).write(fib)
    theta = 0.0
    for i in range(200):
        radius = i * 0.5
        color = 1, 1, 1
        vect = [ radius * sin(theta), radius * cos(theta), 0 ]
        Sphere( vect, 0.7 * sqrt(i),
            Texture(
                Finish(
                    ambient = 0.0,
                    diffuse = 0.0,
                    reflection = 0.85,
                    specular = 1
                ),
                Pigment(color = color))
        ).write(fib)
        theta += gamma * 2 * pi

def test():
    """
    The current test function is ...
    """
    basic_scene()
        
if (__name__ == "__main__"):
    test()      
        
